name: Build & Sign Arch Repo

on:
  push:
    branches: [ "main" ]
    paths:
      - "x86_64/**"
      - ".github/workflows/repo.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:base
    steps:
      - name: Install dependencies
        run: |
          pacman -Sy --noconfirm gnupg base-devel git ca-certificates ca-certificates-utils

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Configurar gpg para CI sin TTY
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf

          # Asegura que existe pinentry y el agente puede arrancar
          pacman -Sy --noconfirm pinentry
          gpgconf --kill gpg-agent || true
          gpgconf --launch gpg-agent

          # Importar desde archivo (evita ioctl issues con stdin)
          KEYFILE="$(mktemp)"
          printf '%s' "$GPG_PRIVATE_KEY" > "$KEYFILE"
          chmod 600 "$KEYFILE"

          gpg --batch --yes --no-tty --pinentry-mode loopback --import "$KEYFILE"
          rm -f "$KEYFILE"

          # Verificación
          gpg --batch --no-tty --list-secret-keys

      - name: Ensure repo dir
        run: |
          set -euo pipefail
          mkdir -p x86_64

      - name: Sign any unsigned packages
        run: |
          set -euo pipefail
          any=0
          for pkg in x86_64/*.pkg.tar.*; do
            [ -e "$pkg" ] || continue   # si el glob no matchea, sigue
            any=1
            if [ -f "${pkg}.sig" ]; then
              echo "Ya firmado: $pkg"
              continue
            fi
            echo "Firmando: $pkg"
            gpg --batch --yes --no-tty --pinentry-mode loopback --detach-sign --armor "$pkg"
          done
          if [ "$any" -eq 0 ]; then
            echo "No hay paquetes en x86_64/. Nada que firmar."
          fi

      - name: Rebuild signed repo database
        working-directory: x86_64
        env:
          REPO_NAME: israrepo
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
        run: |
          set -euo pipefail

          # ¿hay algún paquete?
          count=$(ls -1 x86_64/*.pkg.tar.* 2>/dev/null | wc -l || true)
          if [ "$count" -eq 0 ]; then
            echo "No hay paquetes; se omite reconstrucción de la DB."
            exit 0
          fi

          # limpiamos DB previa y reconstruimos firmada
          rm -f "x86_64/${REPO_NAME}.db"* "x86_64/${REPO_NAME}.files"* || true
          repo-add -s -k "$GPG_KEYID" -R "x86_64/${REPO_NAME}.db.tar.gz" x86_64/*.pkg.tar.*

          # copias planas (evitar symlinks en Pages)
          cp "x86_64/${REPO_NAME}.db.tar.gz"    "x86_64/${REPO_NAME}.db"
          cp "x86_64/${REPO_NAME}.files.tar.gz" "x86_64/${REPO_NAME}.files"

          # índice html opcional
          cat > x86_64/index.html <<'HTML'
          <!doctype html><meta charset="utf-8"><title>Arch Repo</title>
          <h1>Arch Repo</h1><ul>
          <!-- listado simple -->
          </ul>
          <script>
            fetch('.').then(r=>r.text()).then(t=>{
              const a=[...t.matchAll(/href="([^"]+)"/g)].map(m=>m[1]);
              document.querySelector('ul').innerHTML=a.map(h=>`<li><a href="${h}">${h}</a></li>`).join('');
            });
          </script>
          HTML

      - name: Commit & push if changed
        working-directory: ${{ github.workspace }}
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -euo pipefail
          ls -lisah
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          echo "Ubicación actual: $(pwd)"
          echo "Archivos modificados:"
          git status --short || true

          if ! git diff --quiet || ! git diff --cached --quiet; then
            git add -A
            git commit -m "Update signed repo database"
            git push
          else
            echo "No changes to commit."
          fi
