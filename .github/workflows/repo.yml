name: Build & Sign Arch Repo

on:
  push:
    branches: [ "main" ]
    paths:
      - "x86_64/**"
      - ".github/workflows/repo.yml"

jobs:
  regenerating-repo:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Install git
        run: pacman -Sy --noconfirm git openssh
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: List keys
        run: gpg -K
      - name: Sign any unsigned packages
        env:
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          any=0
          for pkg in x86_64/*.pkg.tar.*; do
            [ -e "$pkg" ] || continue   # si el glob no matchea, sigue
            any=1
            if [ -f "${pkg}.sig" ]; then
              echo "Ya firmado: $pkg"
              continue
            fi
            gpg --batch --yes --pinentry-mode loopback \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --detach-sign "$pkg"
          done
          ls -l x86_64

      - name: Rebuild signed repo database
        env:
          REPO_NAME: israrepo
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
        run: |
          count=$(ls -1 x86_64/*.pkg.tar.zst 2>/dev/null | wc -l || true)
          if [ "$count" -eq 0 ]; then
            echo "No hay paquetes; se omite reconstrucción de la DB."
            exit 0
          fi

          # 2) limpiar DB previa
          rm -f "x86_64/${REPO_NAME}.db"* "x86_64/${REPO_NAME}.files"* || true

          # 3) reconstruir DB firmada con SOLO paquetes (excluye .sig)
          repo-add -s -k "$GPG_KEYID" -R \
            "x86_64/${REPO_NAME}.db.tar.gz" \
            x86_64/*.pkg.tar.zst

          # 4) copias planas (evitar symlinks en Pages)
          rm -rf x86_64/${REPO_NAME}.db x86_64/${REPO_NAME}.files || true
          cp "x86_64/${REPO_NAME}.db.tar.gz"    "x86_64/${REPO_NAME}.db"
          cp "x86_64/${REPO_NAME}.files.tar.gz" "x86_64/${REPO_NAME}.files"

          # 5) index HTML opcional
          cat > x86_64/index.html <<'HTML'
          <!doctype html><meta charset="utf-8"><title>Arch Repo</title>
          <h1>Arch Repo</h1><ul></ul>
          <script>
            fetch('.').then(r=>r.text()).then(t=>{
              const a=[...t.matchAll(/href="([^"]+)"/g)].map(m=>m[1]);
              document.querySelector('ul').innerHTML=a.map(h=>`<li><a href="${h}">${h}</a></li>`).join('');
            });
          </script>
          HTML

          ls -lisah x86_64

      - name: Set SSH
        env:
          REPO_NAME: israrepo
          DEPLOY_KEY_PRIV: ${{ secrets.DEPLOY_KEY_PRIV }}
          DEPLOY_KEY_PUB: ${{ secrets.DEPLOY_KEY_PUB }}
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${DEPLOY_KEY_PRIV}" > ~/.ssh/id_ed25519
          echo "${DEPLOY_KEY_PUB}" > ~/.ssh/id_ed25519.pub
          chmod 600 ~/.ssh/id_ed25519 || true
          chmod 644 ~/.ssh/id_ed25519.pub || true
          ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts

      - name: Commit & push if changed
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          pwd
          ls -lisah x86_64
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          echo "Ubicación actual: $(pwd)"
          echo "Archivos modificados:"
          git status --short || true
          git add .
          git commit -m "Update signed repo database"
          git push









# jobs:
#   build:
#     runs-on: ubuntu-latest
#     container:
#       image: archlinux:base
#     steps:
#       - name: Install dependencies
#         run: |
#           pacman -Sy --noconfirm gnupg base-devel git ca-certificates ca-certificates-utils pinentry
#
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           persist-credentials: true
#
#       - name: Import GPG key
#         env:
#           GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
#         run: |
#           set -euo pipefail
#           mkdir -p ~/.gnupg
#           chmod 700 ~/.gnupg
#
#           # Configurar gpg para CI sin TTY
#           echo "use-agent" >> ~/.gnupg/gpg.conf
#           echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
#           echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
#
#           gpgconf --kill gpg-agent || true
#           gpgconf --launch gpg-agent
#
#           # Importar
#           echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
#
#           # Verificación
#           gpg --batch --no-tty --list-secret-keys
#
#       - name: Ensure repo dir
#         run: |
#           set -euo pipefail
#           mkdir -p x86_64
#
#       - name: Sign any unsigned packages
#         env:
#           GPG_KEYID: ${{ secrets.GPG_KEYID }}
#           GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#         run: |
#           set -euo pipefail
#
#           any=0
#           for pkg in x86_64/*.pkg.tar.*; do
#             [ -e "$pkg" ] || continue   # si el glob no matchea, sigue
#             any=1
#             if [ -f "${pkg}.sig" ]; then
#               echo "Ya firmado: $pkg"
#               continue
#             fi
#             echo "Firmando: $pkg"
#             gpg --batch --pinentry-mode=loopback --passphrase "$GPG_PASSPHRASE" "$pkg"
#           done
#           if [ "$any" -eq 0 ]; then
#             echo "No hay paquetes en x86_64/. Nada que firmar."
#           fi
#
#       - name: Rebuild signed repo database
#         working-directory: x86_64
#         env:
#           REPO_NAME: israrepo
#           GPG_KEYID: ${{ secrets.GPG_KEYID }}
#         run: |
#           set -euo pipefail
#
#           # ¿hay algún paquete?
#           count=$(ls -1 x86_64/*.pkg.tar.* 2>/dev/null | wc -l || true)
#           if [ "$count" -eq 0 ]; then
#             echo "No hay paquetes; se omite reconstrucción de la DB."
#             exit 0
#           fi
#
#           # limpiamos DB previa y reconstruimos firmada
#           rm -f "x86_64/${REPO_NAME}.db"* "x86_64/${REPO_NAME}.files"* || true
#           repo-add -s -k "$GPG_KEYID" -R "x86_64/${REPO_NAME}.db.tar.gz" x86_64/*.pkg.tar.*
#
#           # copias planas (evitar symlinks en Pages)
#           cp "x86_64/${REPO_NAME}.db.tar.gz"    "x86_64/${REPO_NAME}.db"
#           cp "x86_64/${REPO_NAME}.files.tar.gz" "x86_64/${REPO_NAME}.files"
#
#           # índice html opcional
#           cat > x86_64/index.html <<'HTML'
#           <!doctype html><meta charset="utf-8"><title>Arch Repo</title>
#           <h1>Arch Repo</h1><ul>
#           <!-- listado simple -->
#           </ul>
#           <script>
#             fetch('.').then(r=>r.text()).then(t=>{
#               const a=[...t.matchAll(/href="([^"]+)"/g)].map(m=>m[1]);
#               document.querySelector('ul').innerHTML=a.map(h=>`<li><a href="${h}">${h}</a></li>`).join('');
#             });
#           </script>
#           HTML
#
#       - name: Commit & push if changed
#         working-directory: ${{ github.workspace }}
#         env:
#           GITHUB_WORKSPACE: ${{ github.workspace }}
#         run: |
#           set -euo pipefail
#           ls -lisah
#           git config --global --add safe.directory "$GITHUB_WORKSPACE"
#           git config --global user.name  "github-actions[bot]"
#           git config --global user.email "github-actions[bot]@users.noreply.github.com"
#
#           echo "Ubicación actual: $(pwd)"
#           echo "Archivos modificados:"
#           git status --short || true
#
#           if ! git diff --quiet || ! git diff --cached --quiet; then
#             git add -A
#             git commit -m "Update signed repo database"
#             git push
#           else
#             echo "No changes to commit."
#           fi
